#!/bin/bash
# linux-ck-autobuild
VERSION=0.4.1
# Author: Jochum D, jooch (at) gmx (dot) com
# License: GPL3
# About: This script will automatically build specified ck kernels
# Usage: Run 'linux-ck-autobuild' or 'linux-ck-autobuild -h' for more details.
# URL: https://github.com/j00ch/linux-ck-autobuild
# with VDS (with low RAM) support by Nebulosa 

program_name="linux-ck-autobuild"

function print_help {
echo "
$program_name, version $VERSION

A tool to automatically build ck kernels.

Options:
-h,	--help	Display this help
-c,		Create and/or set options

--enable-autostart 	Enable daemon to fully automate build
--disable-autostart	Disable daemon (default)

If you don't have a graphical environment you can use the systemd option:
'systemctl enable $program_name@$USER.service'
"
exit 1
}

function enable_autostart {
service_state="$(systemctl is-active linux-ck-autobuild@$USER.service)"
if [[ $service_state = "active" ]] || [ -r /etc/systemd/system/multi-user.target.wants/linux-ck-autobuild@$USER.service ]; then
	echo "ERROR: systemd service is currently enabled or active, you should disable that first." && exit 1
else
yes_or_no "$msg This will install the daemon into the user's autostart folder, proceed?" &&
cp /etc/$program_name/$program_name-daemon.desktop /home/$USER/.config/autostart/$program_name-daemon.desktop
echo "Installed $program_name-daemon.desktop in /home/$USER/.config/autostart" && exit 1
fi
}

function disable_autostart {
yes_or_no "$msg This will remove the daemon from user's autostart folder, proceed?" &&
rm /home/$USER/.config/autostart/$program_name-daemon.desktop
echo "Removed $program_name-daemon.desktop from /home/$USER/.config/autostart"
exit 1
}

function yes_or_no {
    while true; do
        read -p "$* [y/n]: " yn
        case $yn in
            [Yy]*) return ;;  
            [Nn]*) echo "Aborted" ; exit 1 ;;
        esac
    done
}

function load_config {
if [ -r /home/$USER/.config/$program_name/$program_name.conf ]; then
    . /home/$USER/.config/$program_name/$program_name.conf
    if [ "$CONFIG_VERSION" == "$VERSION" ]; then
		if [[ -z $editor || -z $BUILDDIR || -z $SUBARCH || -z $makeflags ]]; then
		echo "ERROR: One or more settings are missing, please check your configuration." && exit 1
		fi
	else
	update_config
	fi

else
	. /etc/$program_name/default.conf
	yes_or_no "$msg Configuration not found, copy default config?" &&
	mkdir /home/$USER/.config/$program_name/
	cp /etc/$program_name/default.conf /home/$USER/.config/$program_name/$program_name.conf
	edit_config
fi
}

function update_config {

UPDATE=( editor BUILDDIR USE_MODPROBE_DB maxload makeflags USE_KERNEL_COMPRESS_METHOD NOMODULES WATCHDOG_INTERVAL TIMEOUT TIMEOUT_UNIT POSTPONED USER_COMMAND1 USER_COMMAND2 USER_COMMAND3)

mv /home/$USER/.config/$program_name/$program_name.conf /home/$USER/.config/$program_name/$program_name.old
cp /etc/$program_name/default.conf /home/$USER/.config/$program_name/$program_name.conf

for element in "${UPDATE[@]}"; do
	sed -i '/^#/!s|'$element'=".*"|'$element'="'${!element}'"|g' /home/$USER/.config/$program_name/$program_name.conf
done

sed -i '/^#/!s/SUBARCH=(.*)/SUBARCH=( '"${SUBARCH[*]}"' )/g' /home/$USER/.config/$program_name/$program_name.conf
echo "Config updated, you will need to restart this program manually." && exit 1
}

function edit_config {
	if [ -r /usr/bin/$editor ]; then
		$editor /home/$USER/.config/$program_name/$program_name.conf
		. /home/$USER/.config/$program_name/$program_name.conf
	else
		echo -e "No editor found, please set your config in:\n/home/$USER/.config/$program_name/$program_name.conf"
		exit 1
	fi
}

function update_repo {
	if [ -n "$USE_LOCAL_REPO" ]; then
		mv $BUILDDIR/linux-ck/*$latest_version-x86_64.pkg.tar.zst $LOCAL_REPO
		repo-add $LOCAL_REPO_DB $LOCAL_REPO/*$latest_version-x86_64.pkg.tar.zst
	fi
}

function check_build_dir {
	if	[ -r $BUILDDIR/linux-ck/PKGBUILD ]; then
	git -C $BUILDDIR/linux-ck reset --hard --quiet
	git -C $BUILDDIR/linux-ck pull --quiet
	else
	yes_or_no "$msg PKGBUILD not found at configured location, set up now?" &&
	mkdir -p $BUILDDIR
	echo "Cloning AUR package"
	git -C $BUILDDIR clone https://aur.archlinux.org/linux-ck.git --quiet
	fi
}

function check_repo_ck {
	curl_cmd="curl --head --fail --silent"
	kernel=$($curl_cmd $repo_ck_mirror/linux-ck-${!subarch_name}-$latest_version-x86_64.pkg.tar.zst | grep 'HTTP/2 200')
	headers=$($curl_cmd $repo_ck_mirror/linux-ck-${!subarch_name}-headers-$latest_version-x86_64.pkg.tar.zst | grep 'HTTP/2 200')
	if [[ -n $kernel && $headers ]]; then
	cd $BUILDDIR/linux-ck
	if	[ -r $BUILDDIR/linux-ck/linux-ck-${!subarch_name}-$latest_version-x86_64.pkg.tar.zst ]; then
		echo "Selected subarches found in build dir"
		else
		curl -O $repo_ck_mirror/linux-ck-${!subarch_name}-$latest_version-x86_64.pkg.tar.zst
		curl -O $repo_ck_mirror/linux-ck-${!subarch_name}-headers-$latest_version-x86_64.pkg.tar.zst
		fi
	else
	echo "Selected subarch not available in repo-ck"
	fi
}

function main_program {
	load_config
	check_build_dir
	. /etc/$program_name/subarches
	latest_version=$(curl -s https://aur.archlinux.org/packages/linux-ck | grep -o -P '(?<=linux-ck ).*(?=</h2)')
	sed -i '/^build().*/a MAKEFLAGS="'$makeflags'"' $BUILDDIR/linux-ck/PKGBUILD
	for element in "${SUBARCH[@]}"; do
		subarch_name="arch_$element"
		check_repo_ck
		if	[ -r $BUILDDIR/linux-ck/linux-ck-${!subarch_name}-$latest_version-x86_64.pkg.tar.zst ]; then
			echo "$(date +"%Y-%m-%d_%H:%M") Kernel fetched from repo-ck ${!subarch_name}-$latest_version > $BUILDDIR/linux-ck/linux-ck-${!subarch_name}-$latest_version.log"
		else
			if [ -z "$USE_MODPROBE_DB" ]; then 
			sed -i '/pkgbase=/c\pkgbase=linux-ck-'${!subarch_name}'' $BUILDDIR/linux-ck/PKGBUILD
			else
			sed -i '/pkgbase=/c\pkgbase=linux-ck-'${!subarch_name}'-modprobed' $BUILDDIR/linux-ck/PKGBUILD
			fi
			sed -i '/_localmodcfg=/c\_localmodcfg='$USE_MODPROBE_DB'' $BUILDDIR/linux-ck/PKGBUILD
			sed -i '/_subarch=/c\_subarch='$element'' $BUILDDIR/linux-ck/PKGBUILD
			if [ -n "$USE_KERNEL_COMPRESS_METHOD" ]; then
				echo $USE_KERNEL_COMPRESS_METHOD
				sed -i 's/# CONFIG_KERNEL_'$USE_KERNEL_COMPRESS_METHOD' is not set/CONFIG_KERNEL_'$USE_KERNEL_COMPRESS_METHOD'=y/' $BUILDDIR/linux-ck/config
				sed -i 's/CONFIG_KERNEL_ZSTD=y/# CONFIG_KERNEL_ZSTD is not set/' $BUILDDIR/linux-ck/config
				editconfig="Yes"
			fi
			if [ -n "$NOMODULES" ]; then
				for i in $NOMODULES
				do
					echo "Masking module $i..."
					sed -i 's/'$i'=m/#'$i' is not set/' $BUILDDIR/linux-ck/config
				done
				editconfig="Yes"
			fi		
			if [ -n "editconfig" ]; then
				OLDB2SUM=$(grep -A2 b2sum $BUILDDIR/linux-ck/PKGBUILD | tail -1 | cut -d"'" -f2)
				NEWB2SUM=$(b2sum $BUILDDIR/linux-ck/config | cut -d" " -f1)
				sed -i 's/'$OLDB2SUM'/'$NEWB2SUM'/' $BUILDDIR/linux-ck/PKGBUILD
			fi			
			echo "$(date +"%Y-%m-%d_%H:%M") Starting kernel build ${!subarch_name}-$latest_version"
			(cd $BUILDDIR/linux-ck && makepkg -C) > $BUILDDIR/linux-ck/linux-ck-${!subarch_name}-$latest_version.log
			echo "$(date +"%Y-%m-%d_%H:%M") End kernel build ${!subarch_name}-$latest_version"
		fi
	done
	echo "$latest_version" > $BUILDDIR/linux-ck/.last_build
	update_repo
}

[[ $1 = "-h" ]] && print_help || 
[[ $1 = "--help" ]] && print_help || 
[[ $1 = "--enable-autostart" ]] && enable_autostart || 
[[ $1 = "--disable-autostart" ]] && disable_autostart || 
[[ $1 = "-c" ]] && load_config && edit_config || 

main_program
$USER_COMMAND1
$USER_COMMAND2
$USER_COMMAND3
